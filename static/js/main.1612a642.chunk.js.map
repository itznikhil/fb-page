{"version":3,"sources":["fb-hooks.js","App.js","serviceWorker.js","index.js"],"names":["useInitFbSDK","React","useState","isInitialized","setIsInitialized","window","fbAsyncInit","FB","init","appId","cookie","xfbml","version","AppEvents","logPageView","d","s","id","js","fjs","getElementsByTagName","getElementById","createElement","src","parentNode","insertBefore","document","App","isFbSDKInitialized","fbUserAccessToken","setFbUserAccessToken","fbPageAccessToken","setFbPageAccessToken","postText","setPostText","isPublishing","setIsPublishing","logInToFB","useCallback","login","response","authResponse","accessToken","logOutOfFB","logout","useEffect","getLoginStatus","api","access_token","sendPostToPage","message","onClick","className","value","onChange","e","target","placeholder","rows","disabled","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"oQAiBaA,G,MAAe,WAAO,IAAD,EACUC,IAAMC,UAAS,GADzB,mBACzBC,EADyB,KACVC,EADU,KAoBhC,OAfAC,OAAOC,YAAc,WACnBD,OAAOE,GAAGC,KAAK,CAEbC,MAAO,mBACPC,QAAQ,EACRC,OAAO,EACPC,QAAS,SAGXP,OAAOE,GAAGM,UAAUC,cACpBV,GAAiB,IA5BnB,SAAWW,EAAGC,EAAGC,GACf,IAAIC,EACFC,EAAMJ,EAAEK,qBAAqBJ,GAAG,GAC9BD,EAAEM,eAAeJ,MAGrBC,EAAKH,EAAEO,cAAcN,IAClBC,GAAKA,EACRC,EAAGK,IAAM,4CACTJ,EAAIK,WAAWC,aAAaP,EAAIC,IATlC,CAUGO,SAAU,SAAU,kBAuBhBvB,IC4EMwB,MAxGf,WAEE,IAAMC,EAAqB5B,IAFd,EAKqCC,IAAMC,WAL3C,mBAKN2B,EALM,KAKaC,EALb,OAMqC7B,IAAMC,WAN3C,mBAMN6B,EANM,KAMaC,EANb,OAOmB/B,IAAMC,WAPzB,mBAON+B,EAPM,KAOIC,EAPJ,OAQ2BjC,IAAMC,UAAS,GAR1C,mBAQNiC,EARM,KAQQC,EARR,KAWPC,EAAYpC,IAAMqC,aAAY,WAClCjC,OAAOE,GAAGgC,OAAM,SAACC,GACfV,EAAqBU,EAASC,aAAaC,kBAE5C,IAGGC,EAAa1C,IAAMqC,aAAY,WACnCjC,OAAOE,GAAGqC,QAAO,WACfd,EAAqB,MACrBE,EAAqB,WAEtB,IAGH/B,IAAM4C,WAAU,WACVjB,GACFvB,OAAOE,GAAGuC,gBAAe,SAACN,GAAc,IAAD,EACrCV,EAAoB,UAACU,EAASC,oBAAV,aAAC,EAAuBC,kBAG/C,CAACd,IAGJ3B,IAAM4C,WAAU,WACVhB,GACFxB,OAAOE,GAAGwC,IAAV,WAvCU,kBAuCV,6CACkDlB,IAChD,gBAAGmB,EAAH,EAAGA,aAAH,OAAsBhB,EAAqBgB,QAG9C,CAACnB,IAGJ,IAAMoB,EAAiBhD,IAAMqC,aAAY,WACvCF,GAAgB,GAEhB/B,OAAOE,GAAGwC,IAAV,WAlDY,kBAkDZ,SAEE,OACA,CACEG,QAASjB,EACTe,aAAcjB,IAEhB,WACEG,EAAY,IACZE,GAAgB,QAGnB,CAACH,EAAUF,IAGd,OACE,yBAAKd,GAAG,OACN,4BAAQA,GAAG,cACT,uBAAGA,GAAG,aAAN,eACCY,EACC,4BAAQsB,QAASR,EAAYS,UAAU,mBAAvC,WAIA,4BAAQD,QAASd,EAAWe,UAAU,mBAAtC,wBAKJ,0BAAMnC,GAAG,YACNc,EACC,6BAASqB,UAAU,eACjB,2DACA,8BACEC,MAAOpB,EACPqB,SAAU,SAACC,GAAD,OAAOrB,EAAYqB,EAAEC,OAAOH,QACtCI,YAAY,aACZC,KAAK,IACLC,SAAUxB,IAEZ,4BACEgB,QAASF,EACTG,UAAU,kBACVO,UAAW1B,GAAYE,GAEtBA,EAAe,gBAAkB,YAItC,wBAAIiB,UAAU,yBAAd,eC9FUQ,QACW,cAA7BvD,OAAOwD,SAASC,UAEe,UAA7BzD,OAAOwD,SAASC,UAEhBzD,OAAOwD,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFxC,SAASL,eAAe,SDyHpB,kBAAmB8C,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMxB,c","file":"static/js/main.1612a642.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n// Injects the Facebook SDK into the page\r\nconst injectFbSDKScript = () => {\r\n  (function (d, s, id) {\r\n    var js,\r\n      fjs = d.getElementsByTagName(s)[0];\r\n    if (d.getElementById(id)) {\r\n      return;\r\n    }\r\n    js = d.createElement(s);\r\n    js.id = id;\r\n    js.src = \"https://connect.facebook.net/en_US/sdk.js\";\r\n    fjs.parentNode.insertBefore(js, fjs);\r\n  })(document, \"script\", \"facebook-jssdk\");\r\n};\r\n\r\nexport const useInitFbSDK = () => {\r\n  const [isInitialized, setIsInitialized] = React.useState(false);\r\n\r\n  // Initializes the SDK once the script has been loaded\r\n  // https://developers.facebook.com/docs/javascript/quickstart/#loading\r\n  window.fbAsyncInit = function () {\r\n    window.FB.init({\r\n      // Find your App ID on https://developers.facebook.com/apps/\r\n      appId: \"1238918276872953\",\r\n      cookie: true,\r\n      xfbml: true,\r\n      version: \"v8.0\",\r\n    });\r\n\r\n    window.FB.AppEvents.logPageView();\r\n    setIsInitialized(true);\r\n  };\r\n\r\n  injectFbSDKScript();\r\n\r\n  return isInitialized;\r\n};\r\n","import React from \"react\";\r\n\r\nimport \"./styles.css\";\r\nimport { useInitFbSDK } from \"./fb-hooks\";\r\n\r\n// You can find your Page ID\r\n// in the \"About\" section of your page on Facebook.\r\nconst PAGE_ID = \"104209029020481\";\r\n\r\nfunction App() {\r\n  // Initializes the Facebook SDK\r\n  const isFbSDKInitialized = useInitFbSDK();\r\n\r\n  // App state\r\n  const [fbUserAccessToken, setFbUserAccessToken] = React.useState();\r\n  const [fbPageAccessToken, setFbPageAccessToken] = React.useState();\r\n  const [postText, setPostText] = React.useState();\r\n  const [isPublishing, setIsPublishing] = React.useState(false);\r\n\r\n  // Logs in a Facebook user\r\n  const logInToFB = React.useCallback(() => {\r\n    window.FB.login((response) => {\r\n      setFbUserAccessToken(response.authResponse.accessToken);\r\n    });\r\n  }, []);\r\n\r\n  // Logs out the current Facebook user\r\n  const logOutOfFB = React.useCallback(() => {\r\n    window.FB.logout(() => {\r\n      setFbUserAccessToken(null);\r\n      setFbPageAccessToken(null);\r\n    });\r\n  }, []);\r\n\r\n  // Checks if the user is logged in to Facebook\r\n  React.useEffect(() => {\r\n    if (isFbSDKInitialized) {\r\n      window.FB.getLoginStatus((response) => {\r\n        setFbUserAccessToken(response.authResponse?.accessToken);\r\n      });\r\n    }\r\n  }, [isFbSDKInitialized]);\r\n\r\n  // Fetches an access token for the page\r\n  React.useEffect(() => {\r\n    if (fbUserAccessToken) {\r\n      window.FB.api(\r\n        `/${PAGE_ID}?fields=access_token&access_token=${fbUserAccessToken}`,\r\n        ({ access_token }) => setFbPageAccessToken(access_token)\r\n      );\r\n    }\r\n  }, [fbUserAccessToken]);\r\n\r\n  // Publishes a post on the Facebook page\r\n  const sendPostToPage = React.useCallback(() => {\r\n    setIsPublishing(true);\r\n\r\n    window.FB.api(\r\n      `/${PAGE_ID}/feed`,\r\n      \"POST\",\r\n      {\r\n        message: postText,\r\n        access_token: fbPageAccessToken,\r\n      },\r\n      () => {\r\n        setPostText(\"\");\r\n        setIsPublishing(false);\r\n      }\r\n    );\r\n  }, [postText, fbPageAccessToken]);\r\n\r\n  // UI with custom styling from ./styles.css`\r\n  return (\r\n    <div id=\"app\">\r\n      <header id=\"app-header\">\r\n        <p id=\"logo-text\">FB Page API</p>\r\n        {fbUserAccessToken ? (\r\n          <button onClick={logOutOfFB} className=\"btn confirm-btn\">\r\n            Log out\r\n          </button>\r\n        ) : (\r\n          <button onClick={logInToFB} className=\"btn confirm-btn\">\r\n            Login with Facebook\r\n          </button>\r\n        )}\r\n      </header>\r\n      <main id=\"app-main\">\r\n        {fbPageAccessToken ? (\r\n          <section className=\"app-section\">\r\n            <h3>Write something to the page</h3>\r\n            <textarea\r\n              value={postText}\r\n              onChange={(e) => setPostText(e.target.value)}\r\n              placeholder=\"Message...\"\r\n              rows=\"8\"\r\n              disabled={isPublishing}\r\n            />\r\n            <button\r\n              onClick={sendPostToPage}\r\n              className=\"btn confirm-btn\"\r\n              disabled={!postText || isPublishing}\r\n            >\r\n              {isPublishing ? \"Publishing...\" : \"Publish\"}\r\n            </button>\r\n          </section>\r\n        ) : (\r\n          <h2 className=\"placeholder-container\">Welcome!</h2>\r\n        )}\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}